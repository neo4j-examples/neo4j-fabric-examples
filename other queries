#Find customer for account number , in browser can then explore by expanding nodes

MATCH (n:Customer)-[:HAS_ACCOUNT]-(a:Account) where a.account = "00374803"  RETURN n 

Find all the transactions for an account number
 MATCH (t:Transaction)-[:FROM_ACCOUNT]-(a:Account) where a.account = "00374803"  RETURN t

 MATCH (t:Transaction)-[:TO_ACCOUNT]-(a:Account) where a.account = "00374803" return  count(*)



#match accounts used to perform transactions in Aug
match (a:Account)-[:FROM_ACCOUNT|TO_ACCOUNT]-(s:Shard8) set a:Shard8 return count(*)


Find the account details for a customer
match (:Customer {name: 'Jennifer Sims'})-->(account) return account;

#return the types of relationship for a customer account
MATCH (:Customer {name: 'Jennifer Sims'})-[r]->(account)
RETURN type(r) 

return address on HAS_ADDRESS
match (:Customer {name:'Jennifer Sims'})-[:HAS_ADDRESS]->(account) return account.address;

return the account number
match (:Customer {name:'Jennifer Sims'})-[:HAS_ACCOUNT]->(account) return account.account;

return a match on multiple relationships - so all transactions on the account of jennifer
match (:Customer {name:'Jennifer Sims'})-[:HAS_ACCOUNT]->(account)-[:FROM_ACCOUNT|TO_ACCOUNT]-(transaction) return transaction;


###
MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN*1..3]-(movie:Movie)
RETURN movie.title

match (:Customer {name:'Jennifer Sims'})-[]-(t:Transaction) return t;


MATCH p = (customer {name: 'Jennifer Sims'})-[:HAS_SORT_CODE*2]-(t)
RETURN relationships(p)

MATCH
  (js:Person {name: 'Jennifer Sims'}),
  (os:Person {name: 'Oliver Stone'}),
  p = shortestPath((martin)-[*..15]-(oliver))
RETURN p

Find match (t:Transaction) where t.dateTime starts with "2021-09" return t limit 40;